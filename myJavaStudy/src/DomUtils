

import java.io.File;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;


public class DomUtils {
    
    public static String currentPath() {

        String filePath = LoggerUtil.class.getClassLoader().getResource("").getFile().toString();
        String realAbsPath = filePath.substring(1, filePath.length());
        return realAbsPath;
    }

    /**
     * 读取配置文件中指定的配置,返回代码生成VO对象
     * 配置文件地址默认为 : template/config.xml
     * @param type
     * @return
     */
    public static GenerateVO readXML(String type) {
        return readXML(type, null);
    }
    
    /**
     * 读取配置文件中指定的配置,返回代码生成VO对象
     * @param type
     * @param configPath 配置文件地址
     * @return
     */
    public static GenerateVO readXML(String type, String configPath) {

        SAXReader read = new SAXReader();
        GenerateVO generateVO = null;
        try {
            
            String path = currentPath().replace("%20", " ") + "template/config.xml";
            if(!GenerateUtil.isNullOrEmpty(configPath)){
                path = configPath;
            }
            
            Document doc = read.read(new File(path));
            Element rootElement = doc.getRootElement();
            
            Class<GenerateVO> gvo = GenerateVO.class;
            generateVO = gvo.newInstance();
            
            Field[] gfiled = gvo.getDeclaredFields();
            List<String> filedNames = new ArrayList<String>();
            for (Field field : gfiled) {
                filedNames.add(field.getName());
            }
            
            iteratorElement(type, rootElement,filedNames,generateVO);
        }catch (Exception e) {
            LoggerUtil.getLogger().error(e.getClass().getName(), e);
        }
        
        return generateVO;
    }
    
    public static void iteratorElement(String type, Element node, List<String> filedNames, GenerateVO generateVO){
        if(null != node){
            Iterator<Element> it = node.elementIterator();
            while(it.hasNext()){
                Element sonElemnet = it.next();  
                String nodeName = sonElemnet.getName();
                String nodeValue = sonElemnet.getText();
               
                if(null != generateVO.getAppName() && nodeName.endsWith("FileMenu") && !nodeName.equals(generateVO.getAppName() + "FileMenu")){
                    continue;
                }
                
                if(nodeName.endsWith("Rule") && !nodeName.equals(type + "Rule")){
                    continue;
                }
                
                if(filedNames.contains(nodeName)){
                    setter(generateVO, nodeName, nodeValue, String.class);
                }
                
                iteratorElement(type, sonElemnet,filedNames,generateVO);
            }
        }
    }
    
    /** 
     * @param obj 
     *            操作的对象 
     * @param att 
     *            操作的属性 
     * */
    public static void getter(Object obj, String att) {

        try {
            att = att.substring(0, 1).toUpperCase() + att.substring(1,att.length());
            Method method = obj.getClass().getMethod("get" + att);
            LoggerUtil.getLogger().debug(method.invoke(obj));
        } catch (Exception e) {
            LoggerUtil.getLogger().error(e.getClass().getName(), e);
        }
    }

    /** 
     * @param obj 
     *            操作的对象 
     * @param att 
     *            操作的属性 
     * @param value 
     *            设置的值 
     * @param type 
     *            参数的属性 
     * */
    public static void setter(Object obj, String att, Object value, Class<?> type) {

        try {
            att = att.substring(0, 1).toUpperCase() + att.substring(1,att.length());
            Method method = obj.getClass().getMethod("set" + att, type);
            method.invoke(obj, value);
        } catch (Exception e) {
            LoggerUtil.getLogger().error(e.getClass().getName(), e);
        }
    }
}
