
import java.io.IOException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.beetl.core.Configuration;
import org.beetl.core.GroupTemplate;
import org.beetl.core.Template;
import org.beetl.core.resource.FileResourceLoader;




public class GenerateSingleTableCode {
	private Map<String, TableVO> tableColumnMap = new LinkedHashMap<String, TableVO>(); // 主表表字段信息
    private String primaryColumn; // vo中主键的字段名称
    private String primayTableColumn; // 表中主键的列名称
    private GenerateVO generateVO;
    
	public static void singleCode() {
        LoggerUtil.getLogger().debug("- 代码生成开始!  -");
        
        GenerateSingleTableCode code = new GenerateSingleTableCode();
        code.generateCommonFile("single");
        code.generateSingleWebFile();
        
        LoggerUtil.getLogger().debug("- 代码生成结束!  -");
    }
	 /**
     * 根据模板生成代码文件方法
     */
    private void generateCommonFile(String type) {
        LoggerUtil.getLogger().debug("- 初始化配置参数以及生成代码文件 开始!  -");
        
        // 初始化配置参数
        initConfigData(type);

        LoggerUtil.getLogger().debug("- 查询表字段信息!  -");
        // 根据表名称. 查询表字段信息
        getColumnComments(generateVO.getTableName());
        
        String packName = (generateVO.getReplacePackName()==null?generateVO.getClassName().toLowerCase():generateVO.getReplacePackName());

        LoggerUtil.getLogger().debug("- 生成后端服务代码文件!  -");
        // 创建VO文件
        String filePath = MessageFormat.format("{0}{1}{2}/{3}VO.java", generateVO.getSrcPath(), generateVO.getAipPackagePath(), packName, generateVO.getClassName());
        createTemplateFile("VO.java.template", filePath);

        /*// 创建IDao文件
        filePath = MessageFormat.format("{0}{1}{2}/dao/I{3}Dao.java", generateVO.getSrcPath(), generateVO.getImplPackagePath(), packName, generateVO.getClassName());
        createTemplateFile("IDao.java.template", filePath);

        // 创建IService.java文件
        filePath = MessageFormat.format("{0}{1}{2}/service/I{3}Service.java", generateVO.getSrcPath(), generateVO.getImplPackagePath(), packName, generateVO.getClassName());
        createTemplateFile("IService.java.template", filePath);

        // 创建Service.java文件
        filePath = MessageFormat.format("{0}{1}{2}/service/impl/{3}Service.java", generateVO.getSrcPath(), generateVO.getImplPackagePath(), packName, generateVO.getClassName());
        createTemplateFile("Service.java.template", filePath);
        
        // 创建Service.java文件
        filePath = MessageFormat.format("{0}{1}{2}/service/impl/{3}DataProvider.java", generateVO.getSrcPath(), generateVO.getImplPackagePath(), packName, generateVO.getClassName());
        createTemplateFile("ExportDataProvider.java.template", filePath);

        // 创建IDao.xml文件
        filePath = MessageFormat.format("{0}{1}{2}/dao/I{3}Dao.xml", generateVO.getSrcPath(), generateVO.getDaoPackagePath(), packName, generateVO.getClassName());
        createTemplateFile("IDao.xml.template", filePath);
        
        // 创建数据导入模板
        //filePath = MessageFormat.format("{0}{1}{2}.excelImport.xml", generateVO.getSrcPath(), generateVO.getImportOrExportPath(), generateVO.getClassName().toLowerCase());
        //createTemplateFile("ExcelImport.xml.template", filePath);
        
        // 创建数据导出模板
        filePath = MessageFormat.format("{0}{1}{2}.excelExport.xml", generateVO.getSrcPath(), generateVO.getImportOrExportPath(), generateVO.getClassName().toLowerCase());
        createTemplateFile("ExcelExport.xml.template", filePath);

        // 新增rest配置到service.xml文件中
        GenerateUtil.writeRestConfigToFile(generateVO.getConfigFilePath(),generateVO.getPackageName(),generateVO.getClassName());
        
        // 生成国际化配置excel
        if(!GenerateUtil.isNullOrEmpty(generateVO.getExcelPath())){
            GenerateUtil.writeExcelPOI(tableColumnMap, generateVO.getI18nKey(), generateVO.getExcelPath(),generateVO.getIgnoreReloadColumns());
        }*/
    }
    
    /**
     * 初始化参数
     */
    private void initConfigData(String type) {
        LoggerUtil.getLogger().debug("- 初始化配置参数 开始  -");
        LoggerUtil.getLogger().debug("- 生成代码类型(tree/树  || single/单表 || mulit/主从表): " +type);
        
        this.generateVO = DomUtils.readXML(type);
        
        generateVO.setSrcPath(generateVO.getSrcPath().replace("%20", " ").replace("\\", "/"));
        generateVO.setI18nKey(generateVO.getI18nKey() + "." + generateVO.getClassName());
        generateVO.setLowerClassName(GenerateUtil.toFirstLowerStr(generateVO.getClassName())); 
        generateVO.setTreeNameField(GenerateUtil.getClassAttribute(generateVO.getTreeNameField()));
        generateVO.setTreeParentId(GenerateUtil.getClassAttribute(generateVO.getTreeParentId()));
        generateVO.setConfigFilePath(generateVO.getSrcPath() + generateVO.getConfigFilePath());
        generateVO.setImportOrExportPath(generateVO.getImportOrExportPath() + "/" + generateVO.getImportOrExportHeader() + ".");
        this.primayTableColumn = generateVO.getTablePrimaryKey();
        
        LoggerUtil.getLogger().debug("- 初始化配置参数 完成!  -");
    }
    
    /**
     * 查询表信息, 将表信息封装到map以及主键信息保存到全局变量中
     * @param tablename
     * @return
     */
    private Map<String, String> getColumnComments(String tablename) {
        LoggerUtil.getLogger().debug("- 查询表数据开始!  -");
        Connection conn = null;
        Statement st = null;
        ResultSet rs = null;
        Map<String, String> columnCommentsMap = new HashMap<String, String>();
        try {
            conn = GenerateUtil.getConnection(generateVO.getDriver(), generateVO.getDriverUrl(), generateVO.getUser(), generateVO.getPassword());
            st = conn.createStatement();

            // 查询表字段/注释
            getTableColumnToMap(rs, st, tablename, this.tableColumnMap);

            // 查询表主键
            String sql = generateVO.getQueryTablePrimayKeySql().replace("{0}", tablename.toUpperCase());
            
            LoggerUtil.getLogger().debug("查询主键sql : " + sql);
            
            rs = st.executeQuery(sql);
            while (rs.next()) {
                this.primaryColumn = GenerateUtil.getClassAttribute(rs.getString("COLUMN_NAME").toLowerCase());
                this.primayTableColumn = rs.getString("COLUMN_NAME");
            }

            // 主键字段为空时.会影响后续代码生成
            if (GenerateUtil.isNullOrEmpty(this.primaryColumn)) {
                if(GenerateUtil.isNullOrEmpty(this.primayTableColumn)){
                    throw new Exception("表未设置主键字段,并且为在配置文件中初始化tablePrimaryKey字段,  影响代码dao.xml生成, 请设置主键后再操作!");
                }else{
                    this.primaryColumn = GenerateUtil.getClassAttribute(this.primayTableColumn);
                }
            }

            // 表字段信息为空时提示异常
            if (GenerateUtil.isNullOrEmpty(this.tableColumnMap)) {
                throw new Exception("未查询到表字段信息, 请检查表是否已经存在!");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return columnCommentsMap;
    }
    
    private void getTableColumnToMap(ResultSet rs, Statement st, String tableName, Map<String, TableVO> map) throws Exception {

        // 查询表字段/注释
        String sql = generateVO.getQueryTableColumnSql().replace("{0}", tableName.toUpperCase());
        
        LoggerUtil.getLogger().debug("查询表字段 sql : " + sql);
        
        rs = st.executeQuery(sql);
        while (rs.next()) {
            String columnName = GenerateUtil.getClassAttribute(rs.getString("COLUMN_NAME").toLowerCase());

            if (!GenerateUtil.isNullOrEmpty(columnName)) {
                TableVO tableVO = new TableVO();
                tableVO.setColumnComments(rs.getString("COMMENTS"));
                tableVO.setColumnDataType(rs.getString("DATA_TYPE"));
                tableVO.setTableColumName(rs.getString("COLUMN_NAME"));
                tableVO.setXmlFieldDataType(GenerateUtil.convertDataType(rs.getString("DATA_TYPE")));
                tableVO.setFieldDataType(GenerateUtil.convertCodeType(rs.getString("DATA_TYPE")));
                tableVO.setFieldName(columnName);
                tableVO.setColumnId(Long.valueOf(rs.getString("COLUMN_ID")));
                tableVO.setUpperFieldName(columnName.substring(0, 1).toUpperCase() + columnName.substring(1, columnName.length()));
                map.put(columnName, tableVO);
            }
        }
    }
    
    /**
     * 根据模板名 读取模板,生成对应的文件保存
     * @param templateName
     * @param filePath
     */
    private void createTemplateFile(String templateName, String filePath){
        createTemplateFile(templateName,filePath,false);
    }
    
    /**
     * 根据模板名 读取模板,生成对应的文件保存
     * @param templateName
     * @param filePath
     */
    private void createTemplateFile(String templateName, String filePath, boolean isTree) {

        Template template = getTemplate(templateName);
        if(StringUtils.isEmpty(generateVO.getReplacePackName())){
        	template.binding("packName", generateVO.getPackageName() + "." + generateVO.getClassName().toLowerCase());
        }else{
        	template.binding("packName", generateVO.getPackageName() + "." + generateVO.getReplacePackName().toLowerCase());
        }
        template.binding("filePackName", generateVO.getPackageName());
        template.binding("myClassName", generateVO.getClassName());
        template.binding("className", generateVO.getClassName());
        template.binding("myTableName", generateVO.getTableName().toLowerCase());
        template.binding("tableColumnMap", tableColumnMap);
        template.binding("primaryColumn", primaryColumn);
        template.binding("primayTableColumns", primayTableColumn);
        template.binding("lowerClassName", generateVO.getLowerClassName());
        template.binding("i18nKeys", generateVO.getI18nKey());
        template.binding("importOrExportHeader", generateVO.getImportOrExportHeader());
        template.binding("fullLowerClassName", generateVO.getClassName().toLowerCase());
        template.binding("ignoreList", generateVO.getIgnoreReloadColumns().split(","));
        
        if(isTree){
            template.binding("treeParentId", generateVO.getTreeParentId());
            template.binding("treeNameField", generateVO.getTreeNameField());
        }
        
        String result = template.render();

        if (!GenerateUtil.isNullOrEmpty(result)) {
            GenerateUtil.createNewFile(filePath, result);
        }
    }
    
    /**
     * 根据模板路径和名称返回模板对象
     * @param templateFileName
     * @return
     */
    private Template getTemplate(String templateFileName) {
        String filePath = GenerateSingleTableCode.class.getClassLoader().getResource("").getFile().toString();
        String realAbsPath = filePath.substring(1, filePath.length()).replace("%20", " ");
        
        Template template = null;
        try {
            FileResourceLoader resourceLoader = new FileResourceLoader(realAbsPath + "template/", "utf8");
            Configuration cfg = Configuration.defaultConfiguration();
            GroupTemplate gt = new GroupTemplate(resourceLoader, cfg);
            template = gt.getTemplate(templateFileName);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return template;
    }
    
    private void generateSingleWebFile(){
        LoggerUtil.getLogger().debug("- 生成Web代码文件!  -");
        // 创建Edit.html文件
        String filePath = MessageFormat.format("{0}{1}{2}/{2}Edit.html", generateVO.getSrcPath(), generateVO.getWebPackagePath(), generateVO.getClassName().toLowerCase(), generateVO.getClassName());
        createTemplateFile("Edit.html.template", filePath);

        // 创建Edit.js文件
        filePath = MessageFormat.format("{0}{1}{2}/{2}Edit.js", generateVO.getSrcPath(), generateVO.getWebPackagePath(), generateVO.getClassName().toLowerCase(), generateVO.getClassName());
        createTemplateFile("Edit.js.template", filePath);

        // 创建List.html文件
        filePath = MessageFormat.format("{0}{1}{2}/{2}List.html", generateVO.getSrcPath(), generateVO.getWebPackagePath(), generateVO.getClassName().toLowerCase(), generateVO.getClassName());
        createTemplateFile("List.html.template", filePath);

        // 创建List.js文件
        filePath = MessageFormat.format("{0}{1}{2}/{2}List.js", generateVO.getSrcPath(), generateVO.getWebPackagePath(), generateVO.getClassName().toLowerCase(), generateVO.getClassName());
        createTemplateFile("List.js.template", filePath);
    }
}
