<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it.${packName}.dao.I${myClassName}Dao">

	<resultMap id="tableColumnRelatedMap" type="com.it.${packName}.${myClassName}VO">
		<id property="${primaryColumn}" column="${primayTableColumns}" />
		<%
			var firstLine,otherLine,primaryValue;
	        for(entry in tableColumnMap){
	            var key = entry.key;
	            var value = entry.value;
	            if(key == primaryColumn){
	            	continue;
          		}else{
        %>
	        <result property="${key}" column="${value.tableColumName}" />
        <%
	        }}
	    %>
	</resultMap>
	
	<sql id="query_base_sql">
		select 
		<include refid="query_base_column" />
		from ${myTableName} t
	</sql>

	<sql id="query_base_column">
		<%
			var isFirst = true;
	        for(entry in tableColumnMap){
	        	if(isFirst){
	        		isFirst = false;
	            }else{
	            	print(', \r\n');
	            }
	            var value = entry.value;
	            print(strutil.toLowerCase(value.tableColumName));
	        }
    	%>
	</sql>

	<sql id="query_fragment">
		<trim prefix="WHERE" prefixOverrides="AND |OR">
			<%
		        for(entry in tableColumnMap){
		            var key = entry.key;
		            var value = entry.value;
		    %>
		    <if test='_parameter.get("0").${key} != null'>and t.${strutil.toLowerCase(value.tableColumName)} =#{0.${key}, jdbcType=${value.xmlFieldDataType}}</if>
		    <%}%>
		</trim>
	</sql>

	<select id="find${className}PageList" resultMap="tableColumnRelatedMap">
		select * from (
			select rownum rn, t1.* from (
			<include refid="query_base_sql" />
			<include refid="query_fragment" />
		) t1 
 		<![CDATA[ where rownum <= #{1.endIndex}) where rn >= #{1.startIndex} ]]>
	</select>

	<select id="find${className}PageListCount" resultType="int">
		select count(1) from (
			<include refid="query_base_sql" />
			<include refid="query_fragment" />
		)
	</select>

	<sql id="list_query_condition">
		<trim prefix="WHERE" prefixOverrides="and |OR">
			<%
		        for(entry in tableColumnMap){
		            var key = entry.key;
		            var value = entry.value;
		    %>
		    <if test='${key} != null'>and t.${strutil.toLowerCase(value.tableColumName)} =#{${key}, jdbcType=${value.xmlFieldDataType}}</if>	
		    <%}%>
		</trim>
	</sql>

	<select id="find${className}List" resultMap="tableColumnRelatedMap">
		<include refid="query_base_sql" />
		<include refid="list_query_condition" />
	</select>

	<insert id="create${className}" parameterType="com.it.${packName}.${className}VO">
		begin
		<foreach collection="list" item="item">
			insert into ${myTableName} (
			<%
				var isFirst = true;
		        for(entry in tableColumnMap){
		        	if(isFirst){
		        		isFirst = false;
		            }else{
		            	print(', \r\n');
		            }
		            var value = entry.value;
		            print(strutil.toLowerCase(value.tableColumName));
		        }
	    	%>
			) values (
			<%
				var isFirst = true;
		        for(entry in tableColumnMap){
		        	var value = entry.value;
		            var key = entry.key;
		            
		        	if(isFirst){
		        		isFirst = false;
		            }else{
		            	print(', \r\n');
		            }
		            
		            if(key == primaryColumn){
		            %>
	           		<choose>
		  				<when test='item.${key} != null'>
		  					#{item.${key},jdbcType=${value.xmlFieldDataType}}
		  				</when>
		  				<otherwise>
		  					channel_common_s.nextval
		  				</otherwise>
		  			</choose>
		           	<%
		            }else if(key == 'deleteFlag'){
		            %>
	           		'N'
		           	<%
		            }else if(key == 'lastUpdateDate' || key == 'creationDate'){
		            	print('sysdate');
		            }else{
		            	print('#{item.'+key+',jdbcType='+value.xmlFieldDataType+'}');
		            }
		        }
	    	%>
			);
		</foreach>
		end;
	</insert>

	<delete id="delete${className}">
		delete from ${myTableName} where ${strutil.toLowerCase(primayTableColumns)} in 
		<foreach collection="list" item="item" open="(" separator="," close=")">
			#{item.${primaryColumn}}
   	    </foreach>
	</delete>

	<update id="update${className}">
		begin
		<foreach collection="list" item="item">
			update ${myTableName} set
			<%
				var isFirst = true;
		        for(entry in tableColumnMap){
		            var key = entry.key;
		            var value = entry.value;
		            if(isFirst){
		        		isFirst = false;
		    %>
		        <if test='item.${key} != null'>${strutil.toLowerCase(value.tableColumName)}= #{item.${key}, jdbcType=${value.xmlFieldDataType}}</if>
		    <%
		         	}else{
		            
		    %>
				<if test='item.${key} != null'>,${strutil.toLowerCase(value.tableColumName)}= #{item.${key}, jdbcType=${value.xmlFieldDataType}}</if>
		    <%}}%>
			where ${strutil.toLowerCase(primayTableColumns)}= #{item.${primaryColumn}, jdbcType=NUMERIC};
		</foreach>
		end;
	</update>
</mapper>
